{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\frontend\\\\frontdon\\\\src\\\\session.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Créer un contexte pour les données de session\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionContext = /*#__PURE__*/createContext();\n\n// Hook personnalisé pour accéder aux données de session dans les composants\nexport const useSession = () => {\n  _s();\n  return useContext(SessionContext);\n};\n\n// Composant de contexte pour gérer les données de session\n_s(useSession, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const SessionProvider = ({\n  children\n}) => {\n  _s2();\n  // État pour suivre l'état de connexion de l'utilisateur\n\n  let loginUser = a;\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\n    // Récupérer la valeur de isLoggedIn depuis le localStorage s'il existe\n    const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\n    // Si la valeur est stockée, la convertir en booléen et la retourner, sinon retourner false\n    return storedIsLoggedIn ? JSON.parse(storedIsLoggedIn) : false;\n  });\n\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se connecte\n  const login = () => {\n    setIsLoggedIn(true);\n    localStorage.setItem('isLoggedIn', true); // Stocker la valeur dans le localStorage\n    // Effectuer d'autres actions comme stocker le token JWT\n  };\n\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se déconnecte\n  const logout = () => {\n    setIsLoggedIn(false);\n    localStorage.setItem('isLoggedIn', false); // Stocker la valeur dans le localStorage\n    // Effacer les données de session, par exemple le token JWT\n  };\n\n  // Autres fonctions ou états liés à la session...\n\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s2(SessionProvider, \"Es5Ngn/iZO/NSNfVk51OksqP8c0=\");\n_c = SessionProvider;\nvar _c;\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","SessionContext","useSession","_s","SessionProvider","children","_s2","loginUser","a","isLoggedIn","setIsLoggedIn","storedIsLoggedIn","localStorage","getItem","JSON","parse","login","setItem","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/frontend/frontdon/src/session.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Créer un contexte pour les données de session\r\nconst SessionContext = createContext();\r\n\r\n// Hook personnalisé pour accéder aux données de session dans les composants\r\nexport const useSession = () => useContext(SessionContext);\r\n\r\n// Composant de contexte pour gérer les données de session\r\nexport const SessionProvider = ({ children }) => {\r\n  // État pour suivre l'état de connexion de l'utilisateur\r\n\r\n  let loginUser =a\r\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\r\n    // Récupérer la valeur de isLoggedIn depuis le localStorage s'il existe\r\n    const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\r\n    // Si la valeur est stockée, la convertir en booléen et la retourner, sinon retourner false\r\n    return storedIsLoggedIn ? JSON.parse(storedIsLoggedIn) : false;\r\n  });\r\n\r\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se connecte\r\n  const login = () => {\r\n    setIsLoggedIn(true);\r\n    localStorage.setItem('isLoggedIn', true); // Stocker la valeur dans le localStorage\r\n    // Effectuer d'autres actions comme stocker le token JWT\r\n  };\r\n\r\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se déconnecte\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    localStorage.setItem('isLoggedIn', false); // Stocker la valeur dans le localStorage\r\n    // Effacer les données de session, par exemple le token JWT\r\n  };\r\n\r\n  // Autres fonctions ou états liés à la session...\r\n\r\n  return (\r\n    <SessionContext.Provider value={{ isLoggedIn, login, logout }}>\r\n      {children}\r\n    </SessionContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;;AAEtC;AACA,OAAO,MAAMM,UAAU,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,cAAc,CAAC;AAAA;;AAE1D;AAAAE,EAAA,CAFaD,UAAU;AAGvB,OAAO,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C;;EAEA,IAAIC,SAAS,GAAEC,CAAC;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACjD;IACA,MAAMa,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC3D;IACA,OAAOF,gBAAgB,GAAGG,IAAI,CAACC,KAAK,CAACJ,gBAAgB,CAAC,GAAG,KAAK;EAChE,CAAC,CAAC;;EAEF;EACA,MAAMK,KAAK,GAAGA,CAAA,KAAM;IAClBN,aAAa,CAAC,IAAI,CAAC;IACnBE,YAAY,CAACK,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1C;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBR,aAAa,CAAC,KAAK,CAAC;IACpBE,YAAY,CAACK,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;IAC3C;EACF,CAAC;;EAED;;EAEA,oBACEjB,OAAA,CAACC,cAAc,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEX,UAAU;MAAEO,KAAK;MAAEE;IAAO,CAAE;IAAAb,QAAA,EAC3DA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAAClB,GAAA,CAhCWF,eAAe;AAAAqB,EAAA,GAAfrB,eAAe;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}