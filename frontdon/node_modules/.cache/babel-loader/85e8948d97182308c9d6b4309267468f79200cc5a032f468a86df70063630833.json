{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\frontend\\\\frontdon\\\\src\\\\session.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Créer un contexte pour les données de session\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SessionContext = /*#__PURE__*/createContext(null);\n\n// Composant de contexte pour gérer les données de session\nexport const SessionProvider = ({\n  children\n}) => {\n  _s();\n  // État pour suivre l'état de connexion de l'utilisateur\n  const [isLoggedIn, setIsLoggedIn] = useState(null);\n\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se connecte\n  const login = isLoggedIn => {\n    setIsLoggedIn(isLoggedIn);\n    // Effectuer d'autres actions comme stocker le token JWT\n  };\n\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se déconnecte\n  const logout = () => {\n    setIsLoggedIn(null);\n    // Effacer les données de session, par exemple le token JWT\n  };\n\n  // Autres fonctions ou états liés à la session...\n\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(SessionProvider, \"f2P1j2p1ZLltTbUylBfIaIehK4I=\");\n_c = SessionProvider;\nvar _c;\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","SessionContext","SessionProvider","children","_s","isLoggedIn","setIsLoggedIn","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/frontend/frontdon/src/session.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Créer un contexte pour les données de session\r\nexport const SessionContext = createContext(null);\r\n\r\n\r\n\r\n// Composant de contexte pour gérer les données de session\r\nexport const SessionProvider = ({ children }) => {\r\n  // État pour suivre l'état de connexion de l'utilisateur\r\n  const [isLoggedIn, setIsLoggedIn] = useState(null);\r\n\r\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se connecte\r\n  const login = (isLoggedIn) => {\r\n    setIsLoggedIn(isLoggedIn);\r\n    // Effectuer d'autres actions comme stocker le token JWT\r\n  };\r\n\r\n  // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se déconnecte\r\n  const logout = () => {\r\n    setIsLoggedIn(null);\r\n    // Effacer les données de session, par exemple le token JWT\r\n  };\r\n\r\n  // Autres fonctions ou états liés à la session...\r\n\r\n  return (\r\n    <SessionContext.Provider value={{ isLoggedIn, login, logout }}>\r\n      {children}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,cAAc,gBAAGL,aAAa,CAAC,IAAI,CAAC;;AAIjD;AACA,OAAO,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA,MAAMS,KAAK,GAAIF,UAAU,IAAK;IAC5BC,aAAa,CAACD,UAAU,CAAC;IACzB;EACF,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBF,aAAa,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;;EAED;;EAEA,oBACEN,OAAA,CAACC,cAAc,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEL,UAAU;MAAEE,KAAK;MAAEC;IAAO,CAAE;IAAAL,QAAA,EAC3DA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACV,EAAA,CAvBWF,eAAe;AAAAa,EAAA,GAAfb,eAAe;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}