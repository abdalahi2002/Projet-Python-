{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\frontend\\\\frontdon\\\\src\\\\session.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Créer un contexte pour les données de session\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\n\n// Composant de contexte pour gérer les données de session\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  // État pour suivre l'état de connexion de l'utilisateur\n  let [token, setToken] = useState(null);\n  let [user, setUser] = useState(null);\n  let loginUser = async e => {\n    e.preventDefault();\n    console.log(\"Form sbmit\");\n    // let response = await fetch('http://127.0.0.1:8000/login/', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     email: null,\n    //     password: null,\n    //   }),\n    //   credentials: 'include',\n    // });\n  };\n  let contextData = {\n    loginUser: loginUser\n  };\n  // const [isLoggedIn, setIsLoggedIn] = useState(() => {\n  //   // Récupérer la valeur de isLoggedIn depuis le localStorage s'il existe\n  //   const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\n  //   // Si la valeur est stockée, la convertir en booléen et la retourner, sinon retourner false\n  //   return storedIsLoggedIn ? JSON.parse(storedIsLoggedIn) : false;\n  // });\n\n  // // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se connecte\n  // const login = () => {\n  //   setIsLoggedIn(true);\n  //   localStorage.setItem('isLoggedIn', true); // Stocker la valeur dans le localStorage\n  //   // Effectuer d'autres actions comme stocker le token JWT\n  // };\n\n  // // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se déconnecte\n  // const logout = () => {\n  //   setIsLoggedIn(false);\n  //   localStorage.setItem('isLoggedIn', false); // Stocker la valeur dans le localStorage\n  //   // Effacer les données de session, par exemple le token JWT\n  // };\n\n  // Autres fonctions ou états liés à la session...\n\n  return /*#__PURE__*/_jsxDEV(AuthProvider.Provider, {\n    value: {},\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"m0Zk2BcdAa00bRaa/QDaQ/a2Y0c=\");\n_c = AuthProvider;\nex;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","user","setUser","loginUser","e","preventDefault","console","log","contextData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","ex","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/frontend/frontdon/src/session.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\n// Créer un contexte pour les données de session\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\n// Composant de contexte pour gérer les données de session\r\nconst AuthProvider = ({ children }) => {\r\n  // État pour suivre l'état de connexion de l'utilisateur\r\n  let [token, setToken] = useState(null);\r\n  let [user, setUser] = useState(null);\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Form sbmit\");\r\n    // let response = await fetch('http://127.0.0.1:8000/login/', {\r\n    //   method: 'POST',\r\n    //   headers: {\r\n    //     'Content-Type': 'application/json',\r\n    //   },\r\n    //   body: JSON.stringify({\r\n    //     email: null,\r\n    //     password: null,\r\n    //   }),\r\n    //   credentials: 'include',\r\n    // });\r\n  };\r\n  let contextData = {\r\n    loginUser: loginUser,\r\n  };\r\n  // const [isLoggedIn, setIsLoggedIn] = useState(() => {\r\n  //   // Récupérer la valeur de isLoggedIn depuis le localStorage s'il existe\r\n  //   const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\r\n  //   // Si la valeur est stockée, la convertir en booléen et la retourner, sinon retourner false\r\n  //   return storedIsLoggedIn ? JSON.parse(storedIsLoggedIn) : false;\r\n  // });\r\n\r\n  // // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se connecte\r\n  // const login = () => {\r\n  //   setIsLoggedIn(true);\r\n  //   localStorage.setItem('isLoggedIn', true); // Stocker la valeur dans le localStorage\r\n  //   // Effectuer d'autres actions comme stocker le token JWT\r\n  // };\r\n\r\n  // // Fonction pour mettre à jour l'état de connexion de l'utilisateur lorsqu'il se déconnecte\r\n  // const logout = () => {\r\n  //   setIsLoggedIn(false);\r\n  //   localStorage.setItem('isLoggedIn', false); // Stocker la valeur dans le localStorage\r\n  //   // Effacer les données de session, par exemple le token JWT\r\n  // };\r\n\r\n  // Autres fonctions ou états liés à la session...\r\n\r\n  return <AuthProvider.Provider value={{}}>{children}</AuthProvider.Provider>;\r\n};\r\n\r\nex"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,eAAeK,WAAW;;AAE1B;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC;EACA,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,IAAI,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEpC,IAAIW,SAAS,GAAG,MAAOC,CAAC,IAAK;IAC3BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EACD,IAAIC,WAAW,GAAG;IAChBL,SAAS,EAAEA;EACb,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBAAOT,OAAA,CAACE,YAAY,CAACa,QAAQ;IAACC,KAAK,EAAE,CAAC,CAAE;IAAAb,QAAA,EAAEA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AAC7E,CAAC;AAAChB,EAAA,CA/CIF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAiDlBoB,EAAE;AAAA,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}