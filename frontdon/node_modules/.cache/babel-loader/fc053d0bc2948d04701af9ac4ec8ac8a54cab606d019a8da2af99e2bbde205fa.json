{"ast":null,"code":"// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   let [authTokens, setAuthTokens] = useState(() =>\n//     localStorage.getItem(\"authTokens\")\n//       ? JSON.parse(localStorage.getItem(\"authTokens\"))\n//       : null\n//   );\n//   let [user, setUser] = useState(() =>\n//     localStorage.getItem(\"authTokens\")\n//       ? jwtDecode(localStorage.getItem(\"authTokens\"))\n//       : null\n//   );\n//   const [lastLoginTime, setLastLoginTime] = useState(null);\n//   let [loading, setLoading] = useState(true);\n//   const navigate = useNavigate();\n\n//   let loginUser = async (e) => {\n//     e.preventDefault();\n//     let response = await fetch(\"http://127.0.0.1:8000/login/\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         email: e.target.email.value,\n//         password: e.target.password.value,\n//       }),\n//       credentials: \"include\",\n//     });\n//     let data = await response.json();\n//     if (response.status === 200) {\n//       setAuthTokens(data);\n//       setUser(jwtDecode(data.token));\n//       localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//       navigate(\"/\");\n//     } else {\n//       alert(\"Somthing went wrong?\");\n//     }\n//   };\n\n//   let updateToken = async () => {\n//     // if (!authTokens || !authTokens.refresh_token) {\n//     //   // Ne rien faire si le token de rafraîchissement n'est pas défini\n//     //   return;\n//     // }\n//     let response = await fetch(\"http://127.0.0.1:8000/refresh/\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ refresh_token: authTokens?.refresh_token }),\n//     });\n//     let data = await response.json();\n//     if (response.status === 200) {\n//       setAuthTokens(data);\n//       setUser(jwtDecode(data.token));\n//       localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//       setLastLoginTime(Date.now());\n//       localStorage.setItem(\"lastLoginTime\", new Date().toISOString());\n//     } else {\n//       logout();\n//     }\n//   };\n//   let logout = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n//   let contextData = {\n//     user: user,\n//     authTokens: authTokens,\n//     loginUser: loginUser,\n//     logout: logout,\n//   };\n\n//   useEffect(() => {\n//     const storedTime = localStorage.getItem(\"lastLoginTime\");\n//     if (loading && storedTime) {\n//       const elapsedTime = Date.now() - new Date(storedTime).getTime();\n//       const twoMinutes = 1000 * 60 * 2;\n//       if (elapsedTime > twoMinutes) {\n//         updateToken();\n//       }\n//     }\n//   }, [authTokens, loading]);\n//   // useEffect(() => {\n//   //   if (loading) {\n//   //     updateToken();\n//   //   }\n\n//   //   let fourMinutes = 1000 * 60 * 1;\n\n//   //   let interval = setInterval(() => {\n//   //     if (authTokens) {\n//   //       updateToken();\n//   //     }\n//   //   }, fourMinutes);\n//   //   return () => clearInterval(interval);\n//   // }, [authTokens, loading]);\n\n//   return (\n//     <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;","map":{"version":3,"names":[],"sources":["C:/Users/hp/Desktop/frontend/frontdon/src/session.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   let [authTokens, setAuthTokens] = useState(() =>\r\n//     localStorage.getItem(\"authTokens\")\r\n//       ? JSON.parse(localStorage.getItem(\"authTokens\"))\r\n//       : null\r\n//   );\r\n//   let [user, setUser] = useState(() =>\r\n//     localStorage.getItem(\"authTokens\")\r\n//       ? jwtDecode(localStorage.getItem(\"authTokens\"))\r\n//       : null\r\n//   );\r\n//   const [lastLoginTime, setLastLoginTime] = useState(null);\r\n//   let [loading, setLoading] = useState(true);\r\n//   const navigate = useNavigate();\r\n\r\n//   let loginUser = async (e) => {\r\n//     e.preventDefault();\r\n//     let response = await fetch(\"http://127.0.0.1:8000/login/\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({\r\n//         email: e.target.email.value,\r\n//         password: e.target.password.value,\r\n//       }),\r\n//       credentials: \"include\",\r\n//     });\r\n//     let data = await response.json();\r\n//     if (response.status === 200) {\r\n//       setAuthTokens(data);\r\n//       setUser(jwtDecode(data.token));\r\n//       localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//       navigate(\"/\");\r\n//     } else {\r\n//       alert(\"Somthing went wrong?\");\r\n//     }\r\n//   };\r\n\r\n//   let updateToken = async () => {\r\n//     // if (!authTokens || !authTokens.refresh_token) {\r\n//     //   // Ne rien faire si le token de rafraîchissement n'est pas défini\r\n//     //   return;\r\n//     // }\r\n//     let response = await fetch(\"http://127.0.0.1:8000/refresh/\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ refresh_token: authTokens?.refresh_token }),\r\n//     });\r\n//     let data = await response.json();\r\n//     if (response.status === 200) {\r\n//       setAuthTokens(data);\r\n//       setUser(jwtDecode(data.token));\r\n//       localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//       setLastLoginTime(Date.now());\r\n//       localStorage.setItem(\"lastLoginTime\", new Date().toISOString());\r\n//     } else {\r\n//       logout();\r\n//     }\r\n//   };\r\n//   let logout = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n//   let contextData = {\r\n//     user: user,\r\n//     authTokens: authTokens,\r\n//     loginUser: loginUser,\r\n//     logout: logout,\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const storedTime = localStorage.getItem(\"lastLoginTime\");\r\n//     if (loading && storedTime) {\r\n//       const elapsedTime = Date.now() - new Date(storedTime).getTime();\r\n//       const twoMinutes = 1000 * 60 * 2;\r\n//       if (elapsedTime > twoMinutes) {\r\n//         updateToken();\r\n//       }\r\n//     }\r\n//   }, [authTokens, loading]);\r\n//   // useEffect(() => {\r\n//   //   if (loading) {\r\n//   //     updateToken();\r\n//   //   }\r\n\r\n//   //   let fourMinutes = 1000 * 60 * 1;\r\n\r\n//   //   let interval = setInterval(() => {\r\n//   //     if (authTokens) {\r\n//   //       updateToken();\r\n//   //     }\r\n//   //   }, fourMinutes);\r\n//   //   return () => clearInterval(interval);\r\n//   // }, [authTokens, loading]);\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default AuthContext;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}