{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\frontend\\\\frontdon - Admin\\\\src\\\\session.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  let [Tokens, setTokens] = useState(() => localStorage.getItem(\"Tokens\") ? JSON.parse(localStorage.getItem(\"Tokens\")) : null);\n  let [refresh_token, Setrefresh_token] = useState(() => localStorage.getItem(\"refresh_token\") ? JSON.parse(localStorage.getItem(\"refresh_token\")) : null);\n  let [user, setUser] = useState(() => localStorage.getItem(\"Tokens\") ? jwtDecode(localStorage.getItem(\"Tokens\")) : null);\n  let [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/loginadmin/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: e.target.email.value,\n        password: e.target.password.value\n      }),\n      credentials: \"include\"\n    });\n    let data = await response.json();\n    if (response.status === 200) {\n      setTokens(data);\n      Setrefresh_token(data.refresh_token);\n      setUser(jwtDecode(data.token));\n      localStorage.setItem(\"Tokens\", JSON.stringify(data.access_token));\n      localStorage.setItem(\"refresh_token\", JSON.stringify(data.refresh_token_token));\n      console.log(\"Token : \", Tokens);\n      console.log(\"Token : \", Tokens);\n      navigate(\"/\");\n    } else {\n      alert(data.detail);\n    }\n  };\n  let updateToken = async () => {\n    let response = await fetch(\"http://127.0.0.1:8000/refresh_token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token\n      })\n    });\n    let data = await response.json();\n    if (response.status === 200) {\n      setTokens(data);\n      setUser(jwtDecode(data.token));\n      localStorage.setItem(\"Tokens\", JSON.stringify(data));\n    } else {\n      logout();\n    }\n  };\n  console.log(refresh_token);\n  let logout = () => {\n    setTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"Tokens\");\n    localStorage.removeItem(\"refresh_token\"); // Supprimer également refresh_token lors de la déconnexion\n    navigate(\"/login\");\n  };\n  let contextData = {\n    user: user,\n    Tokens: Tokens,\n    loginUser: loginUser,\n    logout: logout\n  };\n\n  // useEffect(() => {\n  //   if (loading) {\n  //     if(refresh_token){\n  //       updateToken();\n  //       setLoading(false);\n  //     }else{\n  //       logout();\n  //     }\n\n  //   }\n\n  //   let interval = setInterval(() => {\n  //     setLoading(true);\n  //   }, 1000 * 60 * 4);\n  //   return () => clearInterval(interval);\n  // }, [refresh_token, loading]);\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"tT55yW1dHrwCgUN9StyZS6RZHCg=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\n\n// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   let [Tokens, setTokens] = useState(() =>\n//     localStorage.getItem(\"Tokens\")\n//       ? JSON.parse(localStorage.getItem(\"Tokens\"))\n//       : null\n//   );\n//   let [user, setUser] = useState(() =>\n//     localStorage.getItem(\"Tokens\")\n//       ? jwtDecode(localStorage.getItem(\"Tokens\"))\n//       : null\n//   );\n//   const [lastLoginTime, setLastLoginTime] = useState(null);\n//   let [loading, setLoading] = useState(true);\n//   const navigate = useNavigate();\n\n//   let loginUser = async (e) => {\n//     e.preventDefault();\n//     let response = await fetch(\"http://127.0.0.1:8000/login/\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         email: e.target.email.value,\n//         password: e.target.password.value,\n//       }),\n//       credentials: \"include\",\n//     });\n//     let data = await response.json();\n//     if (response.status === 200) {\n//       setTokens(data);\n//       setUser(jwtDecode(data.token));\n//       localStorage.setItem(\"Tokens\", JSON.stringify(data));\n//       navigate(\"/\");\n//     } else {\n//       alert(\"Somthing went wrong?\");\n//     }\n//   };\n\n//   let updateToken = async () => {\n//     // if (!Tokens || !Tokens.refresh_token_token) {\n//     //   // Ne rien faire si le token de rafraîchissement n'est pas défini\n//     //   return;\n//     // }\n//     let response = await fetch(\"http://127.0.0.1:8000/refresh_token/\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ refresh_token_token: Tokens?.refresh_token_token }),\n//     });\n//     let data = await response.json();\n//     if (response.status === 200) {\n//       setTokens(data);\n//       setUser(jwtDecode(data.token));\n//       localStorage.setItem(\"Tokens\", JSON.stringify(data));\n//       setLastLoginTime(Date.now());\n//       localStorage.setItem(\"lastLoginTime\", new Date().toISOString());\n//     } else {\n//       logout();\n//     }\n//   };\n//   let logout = () => {\n//     setTokens(null);\n//     setUser(null);\n//     localStorage.removeItem(\"Tokens\");\n//     navigate(\"/login\");\n//   };\n//   let contextData = {\n//     user: user,\n//     Tokens: Tokens,\n//     loginUser: loginUser,\n//     logout: logout,\n//   };\n\n//   useEffect(() => {\n//     const storedTime = localStorage.getItem(\"lastLoginTime\");\n//     if (loading && storedTime) {\n//       const elapsedTime = Date.now() - new Date(storedTime).getTime();\n//       const twoMinutes = 1000 * 60 * 2;\n//       if (elapsedTime > twoMinutes) {\n//         updateToken();\n//       }\n//     }\n//   }, [Tokens, loading]);\n//   // useEffect(() => {\n//   //   if (loading) {\n//   //     updateToken();\n//   //   }\n\n//   //   let fourMinutes = 1000 * 60 * 1;\n\n//   //   let interval = setInterval(() => {\n//   //     if (Tokens) {\n//   //       updateToken();\n//   //     }\n//   //   }, fourMinutes);\n//   //   return () => clearInterval(interval);\n//   // }, [Tokens, loading]);\n\n//   return (\n//     <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jwtDecode","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","Tokens","setTokens","localStorage","getItem","JSON","parse","refresh_token","Setrefresh_token","user","setUser","loading","setLoading","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","email","target","value","password","credentials","data","json","status","token","setItem","access_token","refresh_token_token","console","log","alert","detail","updateToken","logout","removeItem","contextData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/frontend/frontdon - Admin/src/session.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [Tokens, setTokens] = useState(() =>\r\n    localStorage.getItem(\"Tokens\")\r\n      ? JSON.parse(localStorage.getItem(\"Tokens\"))\r\n      : null\r\n  );\r\n  let [refresh_token, Setrefresh_token] = useState(() =>\r\n    localStorage.getItem(\"refresh_token\")\r\n      ? JSON.parse(localStorage.getItem(\"refresh_token\"))\r\n      : null\r\n  );\r\n  let [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"Tokens\")\r\n      ? jwtDecode(localStorage.getItem(\"Tokens\"))\r\n      : null\r\n  );\r\n  let [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n    let response = await fetch(\"http://127.0.0.1:8000/loginadmin/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: e.target.email.value,\r\n        password: e.target.password.value,\r\n      }),\r\n      credentials: \"include\",\r\n    });\r\n    let data = await response.json();\r\n    if (response.status === 200) {\r\n      setTokens(data);\r\n      Setrefresh_token(data.refresh_token)\r\n      setUser(jwtDecode(data.token));\r\n      localStorage.setItem(\"Tokens\", JSON.stringify(data.access_token));\r\n      localStorage.setItem(\"refresh_token\", JSON.stringify(data.refresh_token_token));\r\n      console.log(\"Token : \",Tokens);\r\n      console.log(\"Token : \",Tokens);\r\n      navigate(\"/\");\r\n    } else {\r\n      alert(data.detail);\r\n    }\r\n  };\r\n\r\n  let updateToken = async () => {\r\n    \r\n    let response = await fetch(\"http://127.0.0.1:8000/refresh_token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ refresh_token: refresh_token }),\r\n    });\r\n    let data = await response.json();\r\n    if (response.status === 200) {\r\n      setTokens(data);\r\n      setUser(jwtDecode(data.token));\r\n      localStorage.setItem(\"Tokens\", JSON.stringify(data));\r\n    } else {\r\n      logout();\r\n    }\r\n  };\r\n  console.log(refresh_token);\r\n  let logout = () => {\r\n    setTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"Tokens\");\r\n    localStorage.removeItem(\"refresh_token\"); // Supprimer également refresh_token lors de la déconnexion\r\n    navigate(\"/login\");\r\n  };\r\n  let contextData = {\r\n    user: user,\r\n    Tokens:Tokens,\r\n    loginUser: loginUser,\r\n    logout: logout,\r\n  };\r\n  \r\n  // useEffect(() => {\r\n  //   if (loading) {\r\n  //     if(refresh_token){\r\n  //       updateToken();\r\n  //       setLoading(false);\r\n  //     }else{\r\n  //       logout();\r\n  //     }\r\n      \r\n  //   }\r\n\r\n  //   let interval = setInterval(() => {\r\n  //     setLoading(true);\r\n  //   }, 1000 * 60 * 4);\r\n  //   return () => clearInterval(interval);\r\n  // }, [refresh_token, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n\r\n\r\n// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   let [Tokens, setTokens] = useState(() =>\r\n//     localStorage.getItem(\"Tokens\")\r\n//       ? JSON.parse(localStorage.getItem(\"Tokens\"))\r\n//       : null\r\n//   );\r\n//   let [user, setUser] = useState(() =>\r\n//     localStorage.getItem(\"Tokens\")\r\n//       ? jwtDecode(localStorage.getItem(\"Tokens\"))\r\n//       : null\r\n//   );\r\n//   const [lastLoginTime, setLastLoginTime] = useState(null);\r\n//   let [loading, setLoading] = useState(true);\r\n//   const navigate = useNavigate();\r\n\r\n//   let loginUser = async (e) => {\r\n//     e.preventDefault();\r\n//     let response = await fetch(\"http://127.0.0.1:8000/login/\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({\r\n//         email: e.target.email.value,\r\n//         password: e.target.password.value,\r\n//       }),\r\n//       credentials: \"include\",\r\n//     });\r\n//     let data = await response.json();\r\n//     if (response.status === 200) {\r\n//       setTokens(data);\r\n//       setUser(jwtDecode(data.token));\r\n//       localStorage.setItem(\"Tokens\", JSON.stringify(data));\r\n//       navigate(\"/\");\r\n//     } else {\r\n//       alert(\"Somthing went wrong?\");\r\n//     }\r\n//   };\r\n\r\n//   let updateToken = async () => {\r\n//     // if (!Tokens || !Tokens.refresh_token_token) {\r\n//     //   // Ne rien faire si le token de rafraîchissement n'est pas défini\r\n//     //   return;\r\n//     // }\r\n//     let response = await fetch(\"http://127.0.0.1:8000/refresh_token/\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({ refresh_token_token: Tokens?.refresh_token_token }),\r\n//     });\r\n//     let data = await response.json();\r\n//     if (response.status === 200) {\r\n//       setTokens(data);\r\n//       setUser(jwtDecode(data.token));\r\n//       localStorage.setItem(\"Tokens\", JSON.stringify(data));\r\n//       setLastLoginTime(Date.now());\r\n//       localStorage.setItem(\"lastLoginTime\", new Date().toISOString());\r\n//     } else {\r\n//       logout();\r\n//     }\r\n//   };\r\n//   let logout = () => {\r\n//     setTokens(null);\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"Tokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n//   let contextData = {\r\n//     user: user,\r\n//     Tokens: Tokens,\r\n//     loginUser: loginUser,\r\n//     logout: logout,\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const storedTime = localStorage.getItem(\"lastLoginTime\");\r\n//     if (loading && storedTime) {\r\n//       const elapsedTime = Date.now() - new Date(storedTime).getTime();\r\n//       const twoMinutes = 1000 * 60 * 2;\r\n//       if (elapsedTime > twoMinutes) {\r\n//         updateToken();\r\n//       }\r\n//     }\r\n//   }, [Tokens, loading]);\r\n//   // useEffect(() => {\r\n//   //   if (loading) {\r\n//   //     updateToken();\r\n//   //   }\r\n\r\n//   //   let fourMinutes = 1000 * 60 * 1;\r\n\r\n//   //   let interval = setInterval(() => {\r\n//   //     if (Tokens) {\r\n//   //       updateToken();\r\n//   //     }\r\n//   //   }, fourMinutes);\r\n//   //   return () => clearInterval(interval);\r\n//   // }, [Tokens, loading]);\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default AuthContext;\r\n"],"mappings":"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;EACDL,OAAO,CAACC,GAAG,CAAC7B,aAAa,CAAC;EAC1B,IAAIiC,MAAM,GAAGA,CAAA,KAAM;IACjBtC,SAAS,CAAC,IAAI,CAAC;IACfQ,OAAO,CAAC,IAAI,CAAC;IACbP,YAAY,CAACsC,UAAU,CAAC,QAAQ,CAAC;IACjCtC,YAAY,CAACsC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;IAC1C5B,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EACD,IAAI6B,WAAW,GAAG;IAChBjC,IAAI,EAAEA,IAAI;IACVR,MAAM,EAACA,MAAM;IACba,SAAS,EAAEA,SAAS;IACpB0B,MAAM,EAAEA;EACV,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACE5C,OAAA,CAACC,WAAW,CAAC8C,QAAQ;IAAClB,KAAK,EAAEiB,WAAY;IAAA3C,QAAA,EAAEA;EAAQ;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAE/E,CAAC;AAAC/C,EAAA,CApGWF,YAAY;EAAA,QAiBNJ,WAAW;AAAA;AAAAsD,EAAA,GAjBjBlD,YAAY;AAsGzB,eAAeD,WAAW;;AAG1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}