{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\frontend\\\\frontdon\\\\src\\\\session.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null);\n  let [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwtDecode(localStorage.getItem(\"authTokens\")) : null);\n  const [lastLoginTime, setLastLoginTime] = useState(null);\n  let [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/login/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: e.target.email.value,\n        password: e.target.password.value\n      }),\n      credentials: \"include\"\n    });\n    let data = await response.json();\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.token));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      navigate(\"/\");\n    } else {\n      alert(\"Somthing went wrong?\");\n    }\n  };\n  let updateToken = async () => {\n    // if (!authTokens || !authTokens.refresh_token) {\n    //   // Ne rien faire si le token de rafraîchissement n'est pas défini\n    //   return;\n    // }\n    let response = await fetch(\"http://127.0.0.1:8000/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh_token: authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh_token\n      })\n    });\n    let data = await response.json();\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.token));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      setLastLoginTime(Date.now());\n    } else {\n      logout();\n    }\n  };\n  let logout = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n    navigate(\"/login\");\n  };\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    loginUser: loginUser,\n    logout: logout\n  };\n\n  // useEffect(() => {\n  //   if (loading) {\n  //     updateToken();\n  //   }\n\n  //   let fourMinutes = 1000 * 60 * 1;\n\n  //   let interval = setInterval(() => {\n  //     if (authTokens) {\n  //       updateToken();\n  //     }\n  //   }, fourMinutes);\n  //   return () => clearInterval(interval);\n  // }, [authTokens, loading]);\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"nNRRlamQV5K6S33DCs4/+0J3zH4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jwtDecode","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","lastLoginTime","setLastLoginTime","loading","setLoading","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","email","target","value","password","credentials","data","json","status","token","setItem","alert","updateToken","refresh_token","Date","now","logout","removeItem","contextData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/frontend/frontdon/src/session.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  let [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? jwtDecode(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  const [lastLoginTime, setLastLoginTime] = useState(null);\r\n  let [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n    let response = await fetch(\"http://127.0.0.1:8000/login/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: e.target.email.value,\r\n        password: e.target.password.value,\r\n      }),\r\n      credentials: \"include\",\r\n    });\r\n    let data = await response.json();\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwtDecode(data.token));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n      navigate(\"/\");\r\n    } else {\r\n      alert(\"Somthing went wrong?\");\r\n    }\r\n  };\r\n\r\n  let updateToken = async () => {\r\n    // if (!authTokens || !authTokens.refresh_token) {\r\n    //   // Ne rien faire si le token de rafraîchissement n'est pas défini\r\n    //   return;\r\n    // }\r\n    let response = await fetch(\"http://127.0.0.1:8000/refresh/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ refresh_token: authTokens?.refresh_token }),\r\n    });\r\n    let data = await response.json();\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwtDecode(data.token));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n      setLastLoginTime(Date.now());\r\n    } else {\r\n      logout();\r\n    }\r\n  };\r\n  let logout = () => {\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"authTokens\");\r\n    navigate(\"/login\");\r\n  };\r\n  let contextData = {\r\n    user: user,\r\n    authTokens: authTokens,\r\n    loginUser: loginUser,\r\n    logout: logout,\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (loading) {\r\n  //     updateToken();\r\n  //   }\r\n\r\n  //   let fourMinutes = 1000 * 60 * 1;\r\n\r\n  //   let interval = setInterval(() => {\r\n  //     if (authTokens) {\r\n  //       updateToken();\r\n  //     }\r\n  //   }, fourMinutes);\r\n  //   return () => clearInterval(interval);\r\n  // }, [authTokens, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}